; .\output\CPU_ASM.SRC generated from: ..\..\CPU\8051_KEIL\CPU_ASM.c
; COMPILER INVOKED BY:
;        D:\Program Files\KEIL\C51\BIN\C51.EXE ..\..\CPU\8051_KEIL\CPU_ASM.c BROWSE INCDIR(..\..\CPU\8051_KEIL;..\..\Kernel) DEBUG OBJECTEXTEND PRINT(.\CPU_ASM.lst) SRC(.\output\CPU_ASM.SRC)

$NOMOD51

NAME	CPU_ASM

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
AC	BIT	0D0H.6
T0	BIT	0B0H.4
T1	BIT	0B0H.5
EA	BIT	0A8H.7
T2	BIT	090H.0
IE	DATA	0A8H
P0_0	BIT	080H.0
P1_0	BIT	090H.0
P0_1	BIT	080H.1
P2_0	BIT	0A0H.0
P1_1	BIT	090H.1
P0_2	BIT	080H.2
P3_0	BIT	0B0H.0
P2_1	BIT	0A0H.1
P1_2	BIT	090H.2
P0_3	BIT	080H.3
P3_1	BIT	0B0H.1
P2_2	BIT	0A0H.2
P1_3	BIT	090H.3
P0_4	BIT	080H.4
P3_2	BIT	0B0H.2
P2_3	BIT	0A0H.3
P1_4	BIT	090H.4
P0_5	BIT	080H.5
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
P3_3	BIT	0B0H.3
P2_4	BIT	0A0H.4
P1_5	BIT	090H.5
P0_6	BIT	080H.6
P3_4	BIT	0B0H.4
P2_5	BIT	0A0H.5
P1_6	BIT	090H.6
P0_7	BIT	080H.7
P3_5	BIT	0B0H.5
ES	BIT	0A8H.4
P2_6	BIT	0A0H.6
P1_7	BIT	090H.7
P3_6	BIT	0B0H.6
P2_7	BIT	0A0H.7
IP	DATA	0B8H
P3_7	BIT	0B0H.7
RI	BIT	098H.0
CY	BIT	0D0H.7
INT0	BIT	0B0H.2
INT1	BIT	0B0H.3
TI	BIT	098H.1
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
T2EX	BIT	090H.1
OV	BIT	0D0H.2
RCAP2L	DATA	0CAH
C_T2	BIT	0C8H.1
WR	BIT	0B0H.6
RCLK	BIT	0C8H.5
TCLK	BIT	0C8H.4
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
TMOD	DATA	089H
TCON	DATA	088H
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
CP_RL2	BIT	0C8H.0
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
TL2	DATA	0CCH
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
REN	BIT	098H.4
T2MOD	DATA	0C9H
T2CON	DATA	0C8H
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
F0	BIT	0D0H.5
F1	BIT	0D0H.1
PSW	DATA	0D0H
?PR?OSSched?CPU_ASM  SEGMENT CODE 
?PR?Timer0ISR?CPU_ASM                    SEGMENT CODE 
	EXTRN	CODE (SPPoint)
	EXTRN	DATA (TEMP_SP)
	EXTRN	CODE (TickIntHook)
	EXTRN	DATA (TCB)
	EXTRN	DATA (OSPrioCur)
	EXTRN	DATA (OSPrioHighRdy)
	EXTRN	CODE (?C?CSTPTR)
	EXTRN	CODE (?C?CLDPTR)
	PUBLIC	Timer0ISR
	PUBLIC	OSSched
; /*****************************************************************************************  
;  *  8051 CPU相关ASM文件
;  * 
;  *  Copyright (C) 2010  苑臣芒 
;  * 
;  *  2010-07-09  RaysRTOS 
;  *****************************************************************************************/
; 
; 
; #include "RaySRTOS.h"
; /*
; +---------------------------------------------------------------------------------------+
; |函数名称：	OSSched																		|
; |---------------------------------------------------------------------------------------|
; |函数原型：	void OSSched(prio)															|
; |																						|
; |函数功能：	任务级切换函数 														   		|																						|
; +---------------------------------------------------------------------------------------+
; */
; void OSSched(void)

	RSEG  ?PR?OSSched?CPU_ASM
OSSched:
	USING	0
			; SOURCE LINE # 20
; {
			; SOURCE LINE # 21
;  OS_ENTER_CRITICAL();                //关中断
			; SOURCE LINE # 22
	CLR  	EA
; 						 
; 	if(OSPrioHighRdy != OSPrioCur)			/* 如果不是当前运行的任务，进行任务调度 */
			; SOURCE LINE # 24
	MOV  	A,OSPrioHighRdy
	XRL  	A,OSPrioCur
	JZ   	?C0001
; 	{
			; SOURCE LINE # 25
;  		__asm PUSH ACC       //保护当前任务寄存器
	 PUSH ACC        
;  		__asm PUSH B
	 PUSH B
;  		__asm PUSH DPH
	 PUSH DPH
;  		__asm PUSH DPL
	 PUSH DPL
;  		__asm PUSH PSW
	 PUSH PSW
; 		__asm PUSH AR0	     //0-7为工作寄存器
	 PUSH AR0	      
;  		__asm PUSH AR1
	 PUSH AR1
;  		__asm PUSH AR2
	 PUSH AR2
;  		__asm PUSH AR3
	 PUSH AR3
;  		__asm PUSH AR4
	 PUSH AR4
;  		__asm PUSH AR5
	 PUSH AR5
;  		__asm PUSH AR6
	 PUSH AR6
;  		__asm PUSH AR7   
	 PUSH AR7   
; // TCB[OSPrioCur].OSTCBStkPtr=SP;   	//保存当前堆栈指针
;  SPPoint();
			; SOURCE LINE # 40
	LCALL	SPPoint
;  *TEMP_SP=SP;
			; SOURCE LINE # 41
	MOV  	R3,TEMP_SP
	MOV  	R2,TEMP_SP+01H
	MOV  	R1,TEMP_SP+02H
	MOV  	A,SP
	LCALL	?C?CSTPTR
;  OSPrioCur = OSPrioHighRdy;			// 更新OSPrioCur
			; SOURCE LINE # 42
	MOV  	OSPrioCur,OSPrioHighRdy
;  SPPoint();
			; SOURCE LINE # 43
	LCALL	SPPoint
;  SP=*TEMP_SP;
			; SOURCE LINE # 44
	MOV  	R3,TEMP_SP
	MOV  	R2,TEMP_SP+01H
	MOV  	R1,TEMP_SP+02H
	LCALL	?C?CLDPTR
	MOV  	SP,A
; // SP=TCB[OSPrioCur].OSTCBStkPtr;     //任务堆栈指针切换
; 		__asm POP AR7         		//恢复任务寄存器
	 POP AR7         		 
;  		__asm POP AR6
	 POP AR6
;  		__asm POP AR5
	 POP AR5
;  		__asm POP AR4
	 POP AR4
;  		__asm POP AR3
	 POP AR3
;  		__asm POP AR2
	 POP AR2
;  		__asm POP AR1
	 POP AR1
;  		__asm POP AR0
	 POP AR0
;  		__asm POP PSW
	 POP PSW
;  		__asm POP DPL
	 POP DPL
;  		__asm POP DPH
	 POP DPH
;  		__asm POP B
	 POP B
;  		__asm POP ACC
	 POP ACC
; 	}
			; SOURCE LINE # 59
?C0001:
;  OS_EXIT_CRITICAL();      //开中断
			; SOURCE LINE # 60
	SETB 	EA
; }
			; SOURCE LINE # 61
	RET  	
; END OF OSSched

CSEG	AT	0000BH
	LJMP	Timer0ISR

; 
; /*
; +---------------------------------------------------------------------------------------+
; |函数名称：	Timer0ISR																	|
; |---------------------------------------------------------------------------------------|
; |函数原型：	void Timer0ISR(prio)														|
; |																						|
; |函数功能：	中断级切换函数 														   		|																						|
; +---------------------------------------------------------------------------------------+
; */
; void Timer0ISR(void) interrupt 1 using 0

	RSEG  ?PR?Timer0ISR?CPU_ASM
	USING	0
Timer0ISR:
	PUSH 	ACC
	PUSH 	B
	PUSH 	DPH
	PUSH 	DPL
	PUSH 	PSW
	USING	0
	MOV  	PSW,#00H
			; SOURCE LINE # 72
; {
;     OS_ENTER_CRITICAL();            //关中断
			; SOURCE LINE # 74
	CLR  	EA
;     TH0=0xfe;
			; SOURCE LINE # 75
	MOV  	TH0,#0FEH
;     TL0=0x00;
			; SOURCE LINE # 76
	MOV  	TL0,#00H
; 	TR0=0;
			; SOURCE LINE # 77
	CLR  	TR0
;  __asm PUSH AR0
	 PUSH AR0
;  __asm PUSH AR1
	 PUSH AR1
;  __asm PUSH AR2
	 PUSH AR2
;  __asm PUSH AR3
	 PUSH AR3
;  __asm PUSH AR4
	 PUSH AR4
;  __asm PUSH AR5
	 PUSH AR5
;  __asm PUSH AR6
	 PUSH AR6
;  __asm PUSH AR7
	 PUSH AR7
; 
;  TickIntHook();
			; SOURCE LINE # 87
	LCALL	TickIntHook
;   TCB[OSPrioCur].OSTCBStkPtr=SP;   //保存当前堆栈指针
			; SOURCE LINE # 88
	MOV  	A,OSPrioCur
	MOV  	B,#03H
	MUL  	AB
	ADD  	A,#LOW (TCB)
	MOV  	R0,A
	MOV  	@R0,SP
;   OSPrioCur = OSPrioHighRdy; // 更新OSPrioCur 
			; SOURCE LINE # 89
	MOV  	OSPrioCur,OSPrioHighRdy
;   SP=TCB[OSPrioCur].OSTCBStkPtr;   //任务堆栈指针切换
			; SOURCE LINE # 90
	MOV  	A,OSPrioCur
	MOV  	B,#03H
	MUL  	AB
	ADD  	A,#LOW (TCB)
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	SP,A
; 
;  __asm POP AR7
	 POP AR7
;  __asm POP AR6
	 POP AR6
;  __asm POP AR5
	 POP AR5
;  __asm POP AR4
	 POP AR4
;  __asm POP AR3
	 POP AR3
;  __asm POP AR2
	 POP AR2
;  __asm POP AR1
	 POP AR1
;  __asm POP AR0
	 POP AR0
;  TR0=1;
			; SOURCE LINE # 100
	SETB 	TR0
;  OS_EXIT_CRITICAL();              //开中断
			; SOURCE LINE # 101
	SETB 	EA
; }
			; SOURCE LINE # 102
	POP  	PSW
	POP  	DPL
	POP  	DPH
	POP  	B
	POP  	ACC
	RETI 	
; END OF Timer0ISR

	END
